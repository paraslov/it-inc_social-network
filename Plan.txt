1. NodeJS
2. Components
3. Props
4. Lesson 19: Routing (BrowserRouter , Route)
5. Lesson 20: NavLink, to='', activeClassName={s.active}
6. Lesson 22: Route, exact path='/..'
7. Lesson 24: UI <-- BLL. Extract data.
8. Lesson 25: map() method used to create lists of components (messages and list of users)
9. Lessons 26-27: Using Route render instead of component to throw props through. Dialogs component refactored. All data was managed in index.tsx.
10. Lessons 28-29: state.ts created to manage data in BLL (future signs of redux).
11. Lesson 31: React.createRef(); onClick callbacks for buttons.
12. Lesson 32: Adding callback functions to state.ts and throw them through props to functions that use it. FLUX.
13. Lesson 33: rerenderEntireTree() func is added to render.ts and used in state.ts and index.ts FLUX continued to building up.
14. Lesson 34: FLUX: onChange event in textarea changing data in state and then rerender whole app.
    newPostTextChange and newMessageTextChange added and addPost/sendMessage func updated.
15. Lesson 35: subscribe(observer) callback for rerenderEntireTree using in state.ts.
16. Lesson 36-37: creating store with OOP principles. _callSubscriber and _subscribe func in store. getState() func in store.
    Using method .bind(store) to use store "this" callback context, not props "this" callback context.
    Using "_" (_state) for developer variables and functions.
17. Lesson 38: dispatch(action) used as one function to call in the project. All functions are situated in
    dispatch and choosing by action.type = 'NAME-OF-FUNCTION' value. Dialogs and Profile pages code was refactored
    to use dispatch(action).
18. Lesson 39: Action Creators were added to state.ts. Dialogs and Profile pages code was refactored to use AC.
19. Lesson 41: Reducers were created for Profile and Dialogs pages. All dispatches now go through them.
    In custom store we are now dispatch reducers and get our state from reducers, then rerendering app.
20. Lesson 42: Add Redux to our project. Creating redux store in store.ts. Now all work goes through it.
    Initial state were added to reducers.
21. Lesson 43: Usage of container components to provide all necessary data to presentational components.
    Added: MyPostContainer, DialogsContainer, SidebarContainer.
22. Lesson 44: StoreContext added by React.createContext<StoreType>({} as StoreType). 
    StoreContext.Provider used to give store to App.tsx context.
    StoreContext.Consumer used to give store from context to App children components.
23. Lesson 45: react-redux plugin was installed. Provider from r-r was used and HOC connect
    was used in all container components.
24. Lesson 47: deep copy used in reducers to make connect rerender the app.
    index.tsx refactored and now render App just one first time. rerenderEntireTree func deleted.
25. Lesson 49: Users page reducer and UI added. Set users action added.
26. Lesson 51: REST API practice. Users API: use axios lib to setUsers in Users.tsx
27. Lesson 53: Users.tsx func-l comp-t was transformed into class component. Get Users btn was deleted.
    Now axios get request sending at constructor call.
28. Lesson 54: Class components life cycle. componentDidMount() now used to setUsers.
29. Lesson 55: Pagination. Get parameters/query string. Work with pageSize, currentPage, totalUsersCount.
30. Lesson 56: Creating UsersContainer.tsx with API queries and HOC connect. And functional component Users.tsx as
    presentational component.
31. Lesson 57: Preloader component created. Preloader showing when fetching data.
32. Lesson 58: UsersContainer connect HOC now use object instead of mapDispatchToProps.
33. Lesson 59: setUserProfile functional implemented in ProfileContainer. ProfileInfo now get data from server.
34. Lesson 60: withRouter HOC used in ProfileContainer to use URI params to setUserProfile.
35. Lesson 61: auth reducer created. setUserData functionality implemented in Header component.
36. Lesson 62: follow/unfollow func-ty goes through axios queries.
37. Lesson 63: usersAPI implemented in api.ts for Users component.
38. Lesson 64: follow/unfollow button disabling while query in progress functionality implemented.
39. Lesson 66: thunk middleware added to the project. Thunk creators implemented in Users components branch.
    (yarn add redux-thunk)
40. Lesson 68: Redirect to Login component from Dialogs and Profile components if not authorized.
41. Lesson 69: withAuthRedirect hoc was created to manage isAuth redirect in Profile and Dialogs components.
42. Lesson 70: compose()() implemented in Profile and Dialogs components.
43. Lesson 71: setState used in ProfileStatus.tsx. Local state usage.
44. Lesson 73: get\update user status functionality implemented (DAL, BLL, UI).
45. Lesson 74: use componentDidMount in ProfileStatus to sync local state status with global.
46. Lesson 75: redux-form implemented in project. (yarn add redux-form @types/redux-form)
47. Lesson 77: form validation implemented. FormControls created for validate components.
48. Lesson 79: stopSubmit action implemented in auth reducer to show authorization errors from server.
49. Lesson 80: initializeApp were implemented in project, to prevent redirect effects before initialization data comes
    from server.
50. Lesson 83: selectors implemented in project. Users selectors were created.
    (yarn add reselect @types/reselect)
51. Lesson 84-85: useState, useEffect hooks implemented in ProfileStatusWithHooks.tsx
52. Lesson 86-87: virtual DOM, PureComponent, shouldComponentUpdate, React.memo
53. Lesson 88: pure function
54. Lesson 89: TDD, unit-tests, jest
55. Lesson 90: redux ducks. Refactoring. Paginator.tsx created and myCreateField created to create Field components.
    Also some helpers were added to the project.
56. Lesson 91,92: chrome extensions, components tests.
57. Lesson 93, 94: Paginator.tsx updated (show pack of pages not all), React.lazy(...) implemented for Dialogs and Login.
58. Lesson 96: saveAvatar flow. Sending image to server.
