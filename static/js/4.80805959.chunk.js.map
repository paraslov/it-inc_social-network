{"version":3,"sources":["components/Content/Dialogs/Message/UserMessage.tsx","components/Content/Dialogs/Dialogs.tsx","components/Content/Dialogs/DialogsContainer.tsx"],"names":["UserMessage","props","className","s","messageItem","myMessage","collocutorMessage","messageCircle","messageText","message","SendMessageForm","reduxForm","form","inputAreaContent","onSubmit","handleSubmit","Field","component","Textarea","validate","required","textAreaMaxLengthValidate","name","placeholder","compose","connect","state","dialogsUsersData","dialogsPage","messagesData","sendMessage","dialogsActions","withAuthRedirect","dialogsElements","map","user","Dialog","id","avatar","messagesElements","messageEl","contentWrapper","userDialogs","messages","userMessages","inputArea","formData","newMessageText"],"mappings":"4LAQO,SAASA,EAAYC,GACxB,OACI,sBAAKC,UAAS,UAAKC,IAAEC,YAAP,aAAuBH,EAAMI,WAAaF,IAAEG,mBAA1D,UACKL,EAAMI,WAAa,qBAAKH,UAAWC,IAAEI,gBACtC,qBAAKL,UAAWC,IAAEK,YAAlB,SAAgCP,EAAMQ,WACpCR,EAAMI,WAAa,qBAAKH,UAAWC,IAAEI,mB,qCCoCnD,IAAMG,EAAkBC,YAAwB,CAACC,KAAM,sBAA/BD,EACvB,SAACV,GACE,OACI,uBAAMC,UAAWC,IAAEU,iBAAkBC,SAAUb,EAAMc,aAArD,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUC,KACrBC,KAAM,iBACNC,YAAa,gBACpB,8BACI,kD,yBCjCDC,sBACXC,aARoB,SAACC,GACrB,MAAO,CACHC,iBAAkBD,EAAME,YAAYD,iBACpCE,aAAcH,EAAME,YAAYC,gBAMlB,CACdC,YAAaC,IAAeD,cAEhCE,IALWR,EDdR,SAAiBvB,GACpB,IAMMgC,EAAkBhC,EAAM0B,iBACzBO,KAAI,SAACC,GAAD,OAA0B,cAACC,EAAA,EAAD,CACQC,GAAIF,EAAKE,GACTf,KAAMa,EAAKb,KACXgB,OAAQH,EAAKG,QAHRH,EAAKE,OAI/CE,EAAmBtC,EAAM4B,aAC1BK,KAAI,SAACM,GAAD,OAAkC,cAACxC,EAAD,CACaS,QAAS+B,EAAU/B,QACnBJ,UAAWmC,EAAUnC,WAFhBmC,EAAUH,OAIvE,OACI,sBAAKnC,UAAWC,IAAEsC,eAAlB,UACI,qBAAKvC,UAAWC,IAAEuC,YAAlB,SACKT,IAEL,sBAAK/B,UAAWC,IAAEwC,SAAlB,UACI,qBAAKzC,UAAWC,IAAEyC,aAAlB,SACKL,IAEL,qBAAKrC,UAAWC,IAAE0C,UAAlB,SACI,cAACnC,EAAD,CAAiBI,SA1BX,SAACgC,GACnB7C,EAAM6B,YAAYgB,EAASC,gBAC3BD,EAASC,eAAiB","file":"static/js/4.80805959.chunk.js","sourcesContent":["import s from '../Dialogs.module.css';\r\nimport React from 'react';\r\n\r\nexport type UserMessagePropsType = {\r\n    message: string\r\n    myMessage: boolean\r\n}\r\n\r\nexport function UserMessage(props: UserMessagePropsType) {\r\n    return (\r\n        <div className={`${s.messageItem} ${!props.myMessage && s.collocutorMessage}`}>\r\n            {props.myMessage && <div className={s.messageCircle}/>}\r\n            <div className={s.messageText}>{props.message}</div>\r\n            {!props.myMessage && <div className={s.messageCircle}/>}\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport {Dialog} from './Dialog/Dialog';\r\nimport {UserMessage} from './Message/UserMessage';\r\nimport {DialogMessageType, DialogUserType} from '../../../redux/dialogs_reducer';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../Common/FormControls/FormControls';\r\nimport {required, textAreaMaxLengthValidate} from '../../../utils/validators/validators';\r\n\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n    const onSendMessage = (formData: FormDataType) => {\r\n        props.sendMessage(formData.newMessageText)\r\n        formData.newMessageText = ''\r\n    }\r\n\r\n//* Dialogs and messages mapping ====================================================================================>>\r\n    const dialogsElements = props.dialogsUsersData\r\n        .map((user: DialogUserType) => <Dialog key={user.id}\r\n                                               id={user.id}\r\n                                               name={user.name}\r\n                                               avatar={user.avatar}/>)\r\n    const messagesElements = props.messagesData\r\n        .map((messageEl: DialogMessageType) => <UserMessage key={messageEl.id}\r\n                                                            message={messageEl.message}\r\n                                                            myMessage={messageEl.myMessage}/>)\r\n\r\n    return (\r\n        <div className={s.contentWrapper}>\r\n            <div className={s.userDialogs}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div className={s.userMessages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <div className={s.inputArea}>\r\n                    <SendMessageForm onSubmit={onSendMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//* SendMessageForm component ========================================================================================>>\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\nconst SendMessageForm = reduxForm<FormDataType>({form: 'dialogsSendMessage'})\r\n((props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form className={s.inputAreaContent} onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   validate={[required, textAreaMaxLengthValidate]}\r\n                   name={'newMessageText'}\r\n                   placeholder={'new message'}/>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})","import React from 'react'\r\nimport {DialogMessageType, dialogsActions, DialogUserType} from '../../../redux/dialogs_reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype MapStateType = {\r\n    dialogsUsersData: Array<DialogUserType>\r\n    messagesData: Array<DialogMessageType>\r\n}\r\ntype MapDispatchType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateType & MapDispatchType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        dialogsUsersData: state.dialogsPage.dialogsUsersData,\r\n        messagesData: state.dialogsPage.messagesData,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateType, MapDispatchType, {}, AppStateType>\r\n    (mapStateToProps, {\r\n        sendMessage: dialogsActions.sendMessage,\r\n    }),\r\n    withAuthRedirect,\r\n)(Dialogs)"],"sourceRoot":""}