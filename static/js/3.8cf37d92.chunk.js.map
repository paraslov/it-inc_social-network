{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["module","exports","Login","props","isAuth","to","className","s","loginContainer","instructions","href","target","LoginForm","onSubmit","formData","loginUser","email","password","rememberMe","captcha","captchaUrl","reduxForm","form","handleSubmit","myCreateField","Input","required","inputMaxLengthValidate","formInput","type","checkboxContainer","htmlFor","undefined","src","alt","error","formControlStyles","serverError","btn","LoginContainer","this","React","Component","connect","state","auth"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,aAAe,4BAA4B,UAAY,yBAAyB,KAAO,oBAAoB,kBAAoB,iCAAiC,IAAM,qB,8KCS1NC,EAAQ,SAACC,GAIlB,OAAIA,EAAMC,OAAe,cAAC,IAAD,CAAUC,GAAI,aAEnC,sBAAKC,UAAWC,IAAEC,eAAlB,UACI,sBAAKF,UAAWC,IAAEE,aAAlB,UACI,4DACI,mBAAGC,KAAM,wCACNC,OAAQ,SADX,sBAIJ,2EACA,6DACA,qDAGJ,wCACA,cAACC,EAAD,CAAWC,SAlBE,SAACC,GAClBX,EAAMY,UAAUD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,UAiB1CC,WAAYjB,EAAMiB,iBAiB3DR,EAAYS,YAA2C,CAACC,KAAM,aAAlDD,EACjB,SAAClB,GACE,OACI,uBAAMU,SAAUV,EAAMoB,aAAcjB,UAAWC,IAAEe,KAAjD,UACKE,YAA6B,QAAS,QAASC,IAAO,CAACC,IAAUC,KAAyB,GAAIpB,IAAEqB,WAChGJ,YAA6B,WAAY,WAAYC,IAClD,CAACC,IAAUC,KAAyB,CAACE,KAAM,YAAatB,IAAEqB,WAC9D,sBAAKtB,UAAWC,IAAEuB,kBAAlB,UACI,uBAAOC,QAAQ,eAAf,yBACCP,YAA6B,kBAAcQ,EAAWP,IAAO,GAAI,CAACI,KAAM,YAAY,GAAI,GAAI,mBAEhG1B,EAAMiB,YAAc,qBAAKa,IAAK9B,EAAMiB,WAAYc,IAAI,YACpD/B,EAAMiB,YAAcI,YAA6B,UAAW,2BAA4BC,IAAO,CAACC,MAChGvB,EAAMgC,OAAS,qBAAK7B,UAAW8B,IAAkBC,YAAlC,SACXlC,EAAMgC,QAEX,8BACI,wBAAQ7B,UAAWC,IAAE+B,IAAKT,KAAM,SAAhC,6B,gBCxDVU,E,4JACF,WACI,OAAO,cAAC,EAAD,eAAWC,KAAKrC,Y,GAFFsC,IAAMC,WAqBpBC,uBALF,SAACC,GAAD,MAAwC,CACjDxC,OAAQwC,EAAMC,KAAKzC,OACnBgB,WAAYwB,EAAMC,KAAKzB,cAGmD,CAACL,eAAhE4B,CAA4EJ","file":"static/js/3.8cf37d92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__2c3pI\",\"instructions\":\"Login_instructions__1x6aQ\",\"formInput\":\"Login_formInput__HfDfW\",\"form\":\"Login_form__2o0zP\",\"checkboxContainer\":\"Login_checkboxContainer__UwRAq\",\"btn\":\"Login_btn__1OY9N\"};","import React from 'react'\r\nimport {reduxForm} from 'redux-form'\r\nimport {Input, myCreateField} from '../Common/FormControls/FormControls'\r\nimport {inputMaxLengthValidate, required} from '../../utils/validators/validators'\r\nimport {LoginPropsType} from './LoginContainer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport formControlStyles from '../Common/FormControls/FormControls.module.css'\r\nimport s from './Login.module.css'\r\n\r\n\r\nexport const Login = (props: LoginPropsType) => {\r\n    const handleSubmit = (formData: TLoginFormData) => {\r\n        props.loginUser(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) return <Redirect to={'/profile'}/>\r\n    return (\r\n        <div className={s.loginContainer}>\r\n            <div className={s.instructions}>\r\n                <span>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}> here\r\n                    </a>\r\n                </span>\r\n                <span>or use common test account credentials:</span>\r\n                <span>Email: free@samuraijs.com</span>\r\n                <span>Password: free</span>\r\n            </div>\r\n\r\n            <h2>Login:</h2>\r\n            <LoginForm onSubmit={handleSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//* Login form component ============================================================================================>>\r\nexport type TLoginFormData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\ntype TLoginFormProps = {\r\n    captchaUrl: string | null\r\n}\r\ntype TFormKeysType = keyof TLoginFormData\r\n\r\nconst LoginForm = reduxForm<TLoginFormData, TLoginFormProps>({form: 'loginForm'})\r\n((props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.form}>\r\n            {myCreateField<TFormKeysType>('email', 'email', Input, [required, inputMaxLengthValidate], {}, s.formInput)}\r\n            {myCreateField<TFormKeysType>('password', 'password', Input,\r\n                [required, inputMaxLengthValidate], {type: 'password'}, s.formInput)}\r\n            <div className={s.checkboxContainer}>\r\n                <label htmlFor=\"rememberMeId\">remember me</label>\r\n                {myCreateField<TFormKeysType>('rememberMe', undefined, Input, [], {type: 'checkbox'},'', '', 'rememberMeId')}\r\n            </div>\r\n            {props.captchaUrl && <img src={props.captchaUrl} alt=\"captcha\"/>}\r\n            {props.captchaUrl && myCreateField<TFormKeysType>('captcha', 'enter symbols from image', Input, [required])}\r\n            {props.error && <div className={formControlStyles.serverError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button className={s.btn} type={'submit'}>Sign in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})","import React from 'react';\r\nimport {Login} from './Login';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {connect} from 'react-redux';\r\nimport {loginUser} from '../../redux/auth_reducer';\r\n\r\n\r\nclass LoginContainer extends React.Component<LoginPropsType> {\r\n    render () {\r\n        return <Login {...this.props}/>\r\n    }\r\n}\r\n\r\n\r\ntype MapStateType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchType = {\r\n    loginUser: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\r\n}\r\nexport type LoginPropsType = MapStateType & MapDispatchType\r\n\r\nconst mstp = (state: AppStateType): MapStateType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect<MapStateType, MapDispatchType, {}, AppStateType>(mstp, {loginUser})(LoginContainer)"],"sourceRoot":""}